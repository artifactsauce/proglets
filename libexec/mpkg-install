#!/usr/bin/env bash
# Usage: mpkg install PACKAGE_FAMILY [PACKAGE_LIST]
# Summary: Install packages from the package list
# Help: Install packages from the package list
# PACKAGE_FAMILY:
#   gem
#   go
#   vagrant
#   vscode

set -eu

. $(dirname $0)/../lib/bash/functions
. $(dirname $0)/../lib/bash/logger

if [ $# -lt 1 ]; then
    logger.error "Missing package family."
    mpkg help install
    exit 1
fi

PACKAGE_FAMILY="$1"
if [ $# -ge 2 ]; then
    PACKAGE_LIST="$2"
fi

: ${PACKAGE_LIST:="default"}
: ${PACKAGE_NAME_PREFIX:=""}

logger.debug "PACKAGE_FAMILY=${PACKAGE_FAMILY}"
logger.debug "PACKAGE_LIST=${PACKAGE_LIST}"

case $PACKAGE_FAMILY in
    apt)
        PACKAGE_MANAGER="apt-get"
        PACKAGE_INSTALL_COMMAND="install -y"
    ;;
    brew)
        PACKAGE_MANAGER="brew"
        PACKAGE_INSTALL_COMMAND="install"
    ;;
    cpan)
        PACKAGE_MANAGER="cpanm"
        PACKAGE_INSTALL_COMMAND=""
    ;;
    apm)
        PACKAGE_MANAGER="apm"
        PACKAGE_INSTALL_COMMAND="install"
    ;;
    npm)
        PACKAGE_MANAGER="npm"
        PACKAGE_INSTALL_COMMAND="install -g"
    ;;
    gem)
        PACKAGE_MANAGER="gem"
        PACKAGE_INSTALL_COMMAND="install"
    ;;
    pip)
        PACKAGE_MANAGER="pip"
        PACKAGE_INSTALL_COMMAND="install"
    ;;
    go)
        PACKAGE_MANAGER="go"
        PACKAGE_INSTALL_COMMAND="get -u"
    ;;
    vagrant)
        PACKAGE_MANAGER="vagrant"
        PACKAGE_INSTALL_COMMAND="plugin install"
    ;;
    vscode)
        PACKAGE_MANAGER="code"
        PACKAGE_INSTALL_COMMAND="--install-extension --force"
    ;;
    *)
        logger.error "Unexpected operator: $PACKAGE_FAMILY"
        mpkg help install
        exit 1
    ;;
esac

logger.debug "PACKAGE_MANAGER=${PACKAGE_MANAGER}"
logger.debug "PACKAGE_INSTALL_COMMAND=${PACKAGE_INSTALL_COMMAND}"

if ! /usr/bin/which $PACKAGE_MANAGER > /dev/null; then
    logger.error "Command not founds: $PACKAGE_MANAGER"
    exit 1
fi

PACKAGE_SUPPORT_RESOURCE="$(dirname $0)/../share/mpkg/${PACKAGE_FAMILY}/${PACKAGE_LIST}.sh"
if [ -f "$PACKAGE_SUPPORT_RESOURCE" ]; then
    logger.debug "load resource file: $PACKAGE_SUPPORT_RESOURCE"
    . "$PACKAGE_SUPPORT_RESOURCE"
fi

if type mpkg.install.do_before > /dev/null 2>&1; then
    logger.debug "exec before hook"
    mpkg.install.do_before
fi

cat $(dirname $0)/../share/mpkg/${PACKAGE_FAMILY}/${PACKAGE_LIST}.list \
| grep -v '^#' \
| xargs -I% $PACKAGE_MANAGER $PACKAGE_INSTALL_COMMAND %

if type mpkg.install.do_after > /dev/null 2>&1; then
    logger.debug "exec after hook"
    mpkg.install.do_after
fi
