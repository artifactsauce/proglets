#!/usr/bin/env perl

=head1 NAME

[% script_name %]

=head1 SYNOPSIS

[% script_name %] [OPTIONS]

  OPTIONS:
    --verbose
    --version
    --usage
    --help
    --man

=head1 DESCRIPTION

DESCRIBE HERE

=head1 DEPENDENCIES

=over

[% IF ! disable_log %]=item * Log::Log4perl

[% END -%]
[% IF ! disable_config %]=item * Config::Any

[% END -%]
[% IF ! disable_summary %]=item * DateTime

[% END -%]
[% IF ! disable_summary %]=item * Text::SimpleTable

[% END -%]

=item * Pod::Usage

=item * Find::Bin

=item * Path::Class

=item * IO::Prompt::Simple

=back

=head1 AUTHOR

[% IF author_name -%]
[% author_name %][% IF author_email %] <[% author_email %]>[% END %][% IF author_twitter %] (@[% author_twitter %])[% END %]
[% ELSE -%]
Anonymous <anonymous@psc.riken.jp>
[% END # IF auhor_name -%]

=head1 COPYRIGHT

Copyright [% year %], RIKEN Plant Science Center. All rights reserved.

=head1 LICENCE

This program is free software; you can redistribute it and/or modify it under the same terms as Perl itself.

=cut

use strict;
use warnings;
use Getopt::Long;
use Pod::Usage;

# Recommended useful modules
[% IF disable_log %]#[% END %]use Log::Log4perl;
[% IF disable_config %]#[% END %]use Config::Any;
[% IF disable_summary %]#[% END %]use DateTime;
[% IF disable_summary %]#[% END %]use Text::SimpleTable;
[% IF disable_config %]#[% END %]use File::Basename;
use Path::Class;
#use Data::Dumper;
#use IO::Prompt::Simple;

use FindBin qw( $Bin );
use lib qw( $FindBin::Bin/../lib );

use version; our $VERSION = qv('0.0.1');

#@ARGV > 0 && @ARGV < 2 or pod2usage();

my $config = {
    APP_ROOT => dir( $FindBin::Bin ),
    APP_CONF => dir( $FindBin::Bin, 'conf' ),
};

[% IF ! disable_log -%]

Log::Log4perl::init( $config->{APP_CONF}->file('log4perl.conf')->stringify );
my $logger = Log::Log4perl->get_logger;
[% END # IF disable_log -%]

[% IF ! disable_config -%]

my @filepaths = map { $config->{APP_CONF}->file($_)->stringify } qw/config.yml/;
my $cfg = Config::Any->load_files({ files => \@filepaths, use_ext => 1 });
for ( @$cfg ) {
    my ( $file_name, $configuration ) = %$_;
    my $basename = basename( $file_name, qw/.yml .conf/ );
    $config->{ $basename } = $configuration;
}
[% END # IF disable_config -%]

Getopt::Long::Configure("bundling");
GetOptions(
    'dry-run' => \$config->{dry_run},
    'verbose' => \$config->{verbose},
    'version' => sub { print "$0 $VERSION" && exit },
    'usage'   => sub { pod2usage( -verbose => 0 ) },
    'help'    => sub { pod2usage( -verbose => 1 ) },
    'man'     => sub { pod2usage( -verbose => 2 ) },
    );

[% IF ! disable_summary -%]

my $time_zone = DateTime::TimeZone->new( name => 'local' );

my @lap_time = ();

push @lap_time,  {
    message => "Start program",
    time => DateTime->now( time_zone => $time_zone ),
};
[% END # IF disable_summary -%]

#
# Describe logic
#

[% IF ! disable_summary -%]

push @lap_time,  {
    message => "Finished program",
    time => DateTime->now( time_zone => $time_zone ),
};

my $summary_table = Text::SimpleTable->new( 54, 19 );
foreach my $i ( @lap_time ) {
    $summary_table->row( $i->{message}, $i->{time}->datetime );
}
print $summary_table->draw;
[% END # IF disable_summary -%]

exit;

__END__
